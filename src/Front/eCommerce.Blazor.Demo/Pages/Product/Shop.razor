@page "/"
@inject ProductService service

<PageTitle>@mainLayout.Title</PageTitle>

<MudGrid>
    @if (IsError)
    {
        <MudItem xs="12">
            <Error />
        </MudItem>
    }
    else
    {

        <MudItem xs="12" sm="3">
            <FiltersComponent filterCategory="@Category"
                          filterIsNew="@IsNew"
                          filterIsRenewed="@IsRenewed"
                          filterIsUsed="@IsUsed"
                          filterMaxPrice="@MaxPrice"
                          filterMinPrice="@MinPrice"
                          filterProvider="@Provider"
                          filterScore="@Score"
                          filterText="@Search"
                          OnFilterChangeCallback="FiltersComponentCallback_Change" />
        </MudItem>
        <MudItem xs="12" sm="9">
            <MudStack class="mud-width-full pa-4">
                @if (Products == null)
                {
                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
                }
                else if (!ProductsFound)
                {
                    <Error />
                }
                else
                {

                    <div class="d-flex align-center justify-space-between">
                        <MudToggleIconButton Icon="@Icons.Filled.ViewModule" Color="@Color.Primary" Title="Module"
                                     ToggledIcon="@Icons.Filled.ViewList" ToggledColor="@Color.Secondary" ToggledTitle="List"
                                     ToggledChanged="OnToggledChanged"
                                     Toggled="@isToggle" />

                        <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
                            <MudButton>Show: @ItemsByPage Items by page </MudButton>
                            <MudMenu Icon="@Icons.Material.Filled.ArrowDropDown">
                                <MudMenuItem OnClick="() => setItemsByPage(3)">3</MudMenuItem>
                                <MudMenuItem OnClick="() => setItemsByPage(9)">9</MudMenuItem>
                                <MudMenuItem OnClick="() => setItemsByPage(27)">27</MudMenuItem>
                                <MudMenuItem OnClick="() => setItemsByPage(81)">81</MudMenuItem>
                            </MudMenu>
                        </MudButtonGroup>

                        <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
                            @switch (Sort)
                            {
                                case "MaxPrice":
                                    <MudButton StartIcon="@Icons.Sharp.Sort">Sort by: Max Price </MudButton>
                                    break;
                                case "MinPrice":
                                    <MudButton StartIcon="@Icons.Sharp.Sort">Sort by: Min Price</MudButton>
                                    break;
                                default:
                                    <MudButton StartIcon="@Icons.Sharp.Sort">Sort by: Relevance</MudButton>
                                    break;
                            }
                            <MudMenu Icon="@Icons.Material.Filled.ArrowDropDown">
                                <MudMenuItem OnClick="() => setSort(UtilitiesHelper.ORDERBY.Relevance)">Relevance</MudMenuItem>
                                <MudMenuItem OnClick="() => setSort(UtilitiesHelper.ORDERBY.MinPrice)">MinPrice</MudMenuItem>
                                <MudMenuItem OnClick="() => setSort(UtilitiesHelper.ORDERBY.MaxPrice)">MaxPrice</MudMenuItem>
                            </MudMenu>
                        </MudButtonGroup>

                    </div>
                    @*<div class="d-flex align-center justify-space-between">
                        <MudText Typo="Typo.caption" Class="pl-2">@(ProductsFound? $"Results:{paginationInitialItems} - {paginationFinItems}  of  {TotalProducts} Items": "Items not found" )</MudText>


                        <MudPagination BoundaryCount="1" MiddleCount="1" Count="@TotalPages"
                        ShowFirstButton="true" ShowLastButton="true" SelectedChanged="onPaginationChange" />
                        </div>*@
                    <MudGrid Spacing="4">
                        @foreach (var p in Products)
                        {
                            <MudItem xm="12" sm="@(view == UtilitiesHelper.viewCard.module?4:12)">
                                <ProductCard urlImg="@p.Image" Nombre="@p.Name" Precio="@p.Price.ToString("C")" Descripcion="@p.Description.FirstOrDefault()" view="@view" />
                            </MudItem>
                        }
                    </MudGrid>
                    <div class="d-flex align-center justify-space-between">
                        <MudText Typo="Typo.caption" Class="pl-2">@(ProductsFound? $"Results:{paginationInitialItems} - {paginationFinItems}  of  {TotalProducts} Items": "Items not found" )</MudText>


                        <MudPagination BoundaryCount="1" MiddleCount="1" Count="@TotalPages"
                               ShowFirstButton="true" ShowLastButton="true" SelectedChanged="onPaginationChange" />
                    </div>
                }
            </MudStack>
        </MudItem>
    }
</MudGrid>

@code {
    #region component parameters
    [Parameter]
    public int? Category { get; set; } = 1;
    [Parameter]
    public int? Provider { get; set; }
    [Parameter]
    public string? Search { get; set; }
    [Parameter]
    public bool? IsNew { get; set; }
    [Parameter]
    public bool? IsUsed { get; set; }
    [Parameter]
    public bool? IsRenewed { get; set; }
    [Parameter]
    public decimal? MinPrice { get; set; }
    [Parameter]
    public decimal? MaxPrice { get; set; }
    [Parameter]
    public int Score { get; set; }
    [Parameter]
    public int Page { get; set; }
    [Parameter]
    public int ItemsByPage { get; set; } = 9;
    [Parameter]
    public string Sort { get; set; } = "Relevance";
    [CascadingParameter]
    public MainLayout mainLayout { get; set; }
    #endregion

    #region component properties
    protected bool ProductsFound { get; set; }
    protected int Count { get; set; }
    protected int TotalProducts { get; set; }
    protected int TotalPages { get; set; }
    protected bool isToggle { get; set; } = true;
    protected List<ProductResponse>? Products;
    protected UtilitiesHelper.viewCard view { get; set; }
    protected bool IsError { get; set; }

    protected int paginationInitialItems
    {
        get
        {
            var result = ItemsByPage * (Page - 1);
            return result <= 0 ? 1 : result;
        }
    }

    protected int paginationFinItems
    {
        get
        {
            var result = (paginationInitialItems == 1 ? 0 : paginationInitialItems);
            result += Count;
            return result > TotalProducts ? TotalProducts : result;
        }
    }


    #endregion




    protected override async Task OnInitializedAsync()
    {
        mainLayout.Title = "Shop";
        await OnToggledChanged(false);
        await GetProduct();
    }

    protected async Task OnToggledChanged(bool toggled)
    {
        isToggle = toggled;
        view = toggled ? UtilitiesHelper.viewCard.module : UtilitiesHelper.viewCard.list;
    }

    protected async Task FiltersComponentCallback_Change(FiltersComponent filtersComponent)
    {
        Category = filtersComponent.filterCategory;
        Provider = filtersComponent.filterProvider;
        Search = filtersComponent.filterText;
        IsNew = filtersComponent.filterIsNew;
        IsUsed = filtersComponent.filterIsUsed;
        IsRenewed = filtersComponent.filterIsRenewed;
        MinPrice = filtersComponent.filterMinPrice;
        MaxPrice = filtersComponent.filterMaxPrice;
        Score = filtersComponent.filterScore;
        Products = null;
        ProductsFound = false;
        Page = 0;
        await GetProduct();
    }

    protected async Task onPaginationChange(int page)
    {
        Page = page;
        await GetProduct();
    }

    private async Task setSort(UtilitiesHelper.ORDERBY sort)
    {
        Sort = sort.ToString();
        await GetProduct();
    }

    private async Task setItemsByPage(int itemsByPage)
    {
        ItemsByPage = itemsByPage;
        await GetProduct();
    }

    private async Task GetProduct()
    {
        var request = new ProductCatalogRequest();
        if (Category.HasValue)
            request.CategoryId = Category.Value;
        request.ItemsByPage = ItemsByPage;
        if (MaxPrice.HasValue)
            request.MaxPrice = MaxPrice.Value;
        if (MinPrice.HasValue)
            request.MinPrice = MinPrice.Value;
        request.Page = Page;
        if (Provider.HasValue)
            request.ProviderId = Provider.Value;
        request.Search = Search;
        request.Sort = Sort;
        var data = await service.GetProductCatalog(request);
        if (data.Message == "Successful")
        {
            var response = data.GetResponse<ProductCatalogResponse>();
            ProductsFound = response.ProductsFound;
            Count = response.Count;
            TotalProducts = response.TotalProducts;
            TotalPages = response.TotalPages;
            Products = response.Products.ToList();
        }
        //else
        //{
        //    IsError = true;
        //    //throw data.GetResponse<Exception>();
        //}
    }
}