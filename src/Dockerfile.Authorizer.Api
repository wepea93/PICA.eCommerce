# docker build -t webapiproducts -f Dockerfile .

# ARG VERSION=6.0-alpine
ARG VERSION=6.0-alpine3.14
FROM mcr.microsoft.com/dotnet/sdk:$VERSION as build
# Disable the invariant mode (set in base image)
ENV DOTNET_RUNNING_IN_CONTAINER=true
ENV DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=false
# Install cultures (same approach as Alpine SDK image)
# RUN apk add --no-cache icu-libs krb5-libs libgcc libintl libssl1.1 libstdc++ zlib
WORKDIR /app
COPY . .
RUN dotnet restore \
          # -r linux-x64 /p:PublishReadyToRun=true \
          ./Services/eCommerce.AuthorizerUser.Api/eCommerce.AuthorizerUser.Api/eCommerce.AuthorizerUser.Api.csproj
RUN dotnet publish \
          ./Services/eCommerce.AuthorizerUser.Api/eCommerce.AuthorizerUser.Api/eCommerce.AuthorizerUser.Api.csproj \
          # --runtime alpine-x64 \
          # --self-contained true \
          # /p:PublishTrimmed=true \
          # /p:PublishReadyToRun=true \
          # /p:PublishSingleFile=true \
          -c Release \
          -o /app/published-app

FROM mcr.microsoft.com/dotnet/aspnet:$VERSION as runtime
# FROM mcr.microsoft.com/dotnet/runtime-deps:6.0-alpine-amd64 as runtime
EXPOSE 80
WORKDIR /app
COPY --from=build /app/published-app /app
ENV \
    DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=false \
    LC_ALL=en_US.UTF-8 \
    LANG=en_US.UTF-8
RUN apk add --no-cache icu-libs
ENTRYPOINT ["dotnet", "eCommerce.AuthorizerUser.Api.dll"]